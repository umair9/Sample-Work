AWSTemplateFormatVersion: '2010-09-09'
Description: 'MyWebSite - VPC Stack'
Parameters:
  VPCCidrBlockRange:
    Type: String
    Description: VPC - Cidr block Range
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    Default: 10.1.0.0/16
  PublicSubnetCidrBlockRange:
    Type: String
    Description: Public Subnet - Cidr block Range
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    Default: 10.1.1.0/28
  PublicSubnet2CidrBlockRange:
    Type: String
    Description: Public Subnet 2 - Cidr block Range
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    Default: 10.1.4.0/28
  PrivateSubnetCidrBlockRange:
    Type: String
    Description: Private Subnet - Cidr block Range
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    Default: 10.1.2.0/28
  PrivateSubnet2CidrBlockRange:
    Type: String
    Description: Private Subnet 2 - Cidr block Range
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    Default: 10.1.3.0/28
  PublicSubnetAvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Public Subnet - Availability Zone
  PublicSubnet2AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Public Subnet 2 - Availability Zone
  PrivateSubnetAvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Private Subnet - Availability Zone
  PrivateSubnet2AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Private Subnet 2 - Availability Zone
Resources:
# Creating Custom VPC # 
  MyWebSiteVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlockRange
      Tags:
        - Key: Name
          Value: MyWebSite-VPC

# Subnets #
  MyWebSitePublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref PublicSubnetAvailabilityZone
      CidrBlock: !Ref PublicSubnetCidrBlockRange
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MyWebSite-PublicSubnet
      VpcId: !Ref MyWebSiteVPC
  MyWebSitePublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref PublicSubnet2AvailabilityZone
      CidrBlock: !Ref PublicSubnet2CidrBlockRange
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MyWebSite-PublicSubnet2
      VpcId: !Ref MyWebSiteVPC
  MyWebSitePrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref PrivateSubnetAvailabilityZone
      CidrBlock: !Ref PrivateSubnetCidrBlockRange
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: MyWebSite-PrivateSubnet
      VpcId: !Ref MyWebSiteVPC
  MyWebSitePrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref PrivateSubnet2AvailabilityZone
      CidrBlock: !Ref PrivateSubnet2CidrBlockRange
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: MyWebSite-PrivateSubnet2
      VpcId: !Ref MyWebSiteVPC

# ACLs #
  MyWebSitePublicACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: MyWebSite-PublicACL
      VpcId: !Ref MyWebSiteVPC
  MyWebSitePrivateACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: MyWebSite-PrivateACL
      VpcId: !Ref MyWebSiteVPC

# Public ACL Entries #
  InboundPublicEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyWebSitePublicACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  OnboundPublicEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyWebSitePublicACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

# Private ACL Entries #
  InboundPrivateMySQLEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyWebSitePrivateACL
      Egress: false
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Ref PublicSubnetCidrBlockRange
      PortRange:
        From: 0
        To: 65535
  OutboundPrivateMySQLEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyWebSitePrivateACL
      Egress: true
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Ref PublicSubnetCidrBlockRange
      PortRange:
        From: 0
        To: 65535
  InboundPrivateMySQLEntry2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyWebSitePrivateACL
      Egress: false
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Ref PublicSubnet2CidrBlockRange
      PortRange:
        From: 0
        To: 65535
  OutboundPrivateMySQLEntry2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyWebSitePrivateACL
      Egress: true
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Ref PublicSubnet2CidrBlockRange
      PortRange:
        From: 0
        To: 65535

# Subnets Associations #
  MyWebSitePublicSubnetACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref MyWebSitePublicSubnet
      NetworkAclId: !Ref MyWebSitePublicACL
  MyWebSitePublicSubnet2ACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref MyWebSitePublicSubnet2
      NetworkAclId: !Ref MyWebSitePublicACL
  MyWebSitePrivateSubnetACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref MyWebSitePrivateSubnet
      NetworkAclId: !Ref MyWebSitePrivateACL
  MyWebSitePrivateSubnet2ACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref MyWebSitePrivateSubnet2
      NetworkAclId: !Ref MyWebSitePrivateACL

# Route Tables #
  MyWebSitePublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyWebSiteVPC
      Tags:
        - Key: Name
          Value: My Website Public Subnet - RT
  MyWebSitePublicSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyWebSiteVPC
      Tags:
        - Key: Name
          Value: My Website Public Subnet 2 - RT
  MyWebSitePrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyWebSiteVPC
      Tags:
        - Key: Name
          Value: My Website Private Subnet - RT
  MyWebSitePrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyWebSiteVPC
      Tags:
        - Key: Name
          Value: My Website Private Subnet 2 - RT

# Routing Associations #
  MyWebSitePublicSubnetRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyWebSitePublicSubnet
      RouteTableId: !Ref MyWebSitePublicSubnetRouteTable
  MyWebSitePublicSubnet2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyWebSitePublicSubnet2
      RouteTableId: !Ref MyWebSitePublicSubnet2RouteTable
  MyWebSitePrivateSubnetRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyWebSitePrivateSubnet
      RouteTableId: !Ref MyWebSitePrivateSubnetRouteTable
  MyWebSitePrivateSubnet2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyWebSitePrivateSubnet2
      RouteTableId: !Ref MyWebSitePrivateSubnet2RouteTable

# Internet Gateway #
  MyWebSiteInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:

      Tags:
        - Key: Name
          Value: My Website IG

# Internet Gateway Attachment #
  MyWebSiteVPCIGAssociation:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyWebSiteVPC
      InternetGatewayId: !Ref MyWebSiteInternetGateway

# Route Table Entries #
  # 1. MyWebSitePublicSubnetRouteTable #
  MyWebSitePublicSubnetRTDefaultEntry:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyWebSitePublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyWebSiteInternetGateway

  MyWebSitePublicSubnet2RTDefaultEntry:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyWebSitePublicSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyWebSiteInternetGateway

  # 2. MyWebSitePrivateSubnetRouteTable #
  MyWebSitePrivateSubnetRTDefaultEntry:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyWebSitePrivateSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyWebSiteNATGateway

  # 3. MyWebSitePrivate2SubnetRouteTable #
  MyWebSitePrivateSubnet2RTDefaultEntry:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyWebSitePrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyWebSiteNATGateway

# NAT Gateway #
  MyWebSiteNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyWebSiteNATEIP.AllocationId
      SubnetId: !Ref MyWebSitePublicSubnet
      Tags:
        - Key: Name
          Value: MyWebSite-Nat Gateway

# EIP #
  MyWebSiteNATEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

# Security Groups #
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: MyWebSite-WebServer-SG
      GroupDescription: Security Group for Web Server
      Tags:
        - Key: Name
          Value: MyWebSite-WebServer-SG
      VpcId: !Ref MyWebSiteVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: MyWebSite-RDS-SG
      GroupDescription: Security Group for RDS
      Tags:
        - Key: Name
          Value: MyWebSite-RDS-SG
      VpcId: !Ref MyWebSiteVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: MyWebSite-ELB-SG
      GroupDescription: Security Group for ELB
      Tags:
        - Key: Name
          Value: MyWebSite-ELB-SG
      VpcId: !Ref MyWebSiteVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

# Stack Output #
Outputs:
  StackVPC:
    Description: The ID of the VPC
    Value: !Ref MyWebSiteVPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCId"
  StackPublicSubnet:
    Description: The ID of the Public Subnet
    Value: !Ref MyWebSitePublicSubnet
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetId"
  StackPublicSubnet2:
    Description: The ID of the Public Subnet
    Value: !Ref MyWebSitePublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetId2"
  StackPrivateSubnet:
    Description: The ID of the Private Subnet
    Value: !Ref MyWebSitePrivateSubnet
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetId"
  StackPrivateSubnet2:
    Description: The ID of the Private Subnet 2
    Value: !Ref MyWebSitePrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2Id"
  StackWebServerSecurityGroup:
    Description: The ID of the WebServer SG
    Value: !Ref WebServerSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-WebServerSecurityGroup"
  StackRDSSecurityGroup:
    Description: The ID of the RDS SG
    Value: !Ref RDSSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-RDSSecurityGroup"
  StackELBSecurityGroup:
    Description: The ID of the ELB SG
    Value: !Ref ELBSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-ELBSecurityGroup"